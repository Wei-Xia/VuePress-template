(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{165:function(e,s,i){"use strict";i.r(s);var t=i(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,s=e.$createElement,i=e._self._c||s;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"system-overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#system-overview","aria-hidden":"true"}},[e._v("#")]),e._v(" System Overview")]),e._v(" "),i("p",[e._v("For all w3 users, who want to be informed of changes with high relevance to them, w3 Notifications proactively provides updates across the w3 ecosystem and allows users to centrally manage them. Unlike email and slack, w3 Notifications will maintain a high signal-to-noise ratio by only including information that is opted into by the user, or of critical importance.")]),e._v(" "),i("p",[e._v("Notifications system is simply a way for a predefined type of events such as content publish/update, comments etc. in the source site to trigger a notification i.e. send an instant email, web-notification, send an email digest. Using Notification system users can subscribe to a content/blog/page and authors can centrally manage the notification preferences for comments. Users can opt for instant, daily, weekly notification for type as email. In case of web-notifications (bell icon), users can either turn on/off preference.")]),e._v(" "),i("p",[e._v("To effectively handle the above discussed Notification system requirements, we have designed a Publish-Subscribe model coupled with web services for the adopters to consume and a few backend processes to enable the notification system work flow.")]),e._v(" "),i("h2",{attrs:{id:"publish-subscribe-model"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#publish-subscribe-model","aria-hidden":"true"}},[e._v("#")]),e._v(" Publish-Subscribe model")]),e._v(" "),i("p",[e._v("The publish-subscribe paradigm provides a framework for the exchange of data between independent applications in an event-driven manner, by decoupling the sources of information (publishers) from its consumers (subscribers). Publishers publish messages onto the network and subscribers anonymously receive messages without having to request them, unlike the traditional request-reply communications model, where each request must be queued and answered individually. We use Apache Kafka as a stream processing platform.")]),e._v(" "),i("h2",{attrs:{id:"graphql-services"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#graphql-services","aria-hidden":"true"}},[e._v("#")]),e._v(" GraphQL Services")]),e._v(" "),i("p",[e._v("Adopters consume the web services provided by our Notification system and submit a notification request in case of any event on the adopter page. Notification system implements below services:")]),e._v(" "),i("ul",[i("li",[e._v("Notification service: This service accepts a Notification request from the adopter site and then does some basic request validation and published the message/request to a queue (in this case we are using Kafka Queue as a Publish-Subscribe model define above). This service is asynchronous service; meaning this service doesnâ€™t wait for the complete request to process. It returns a response to the adopter page that a request has been submitted successfully.\n"),i("ul",[i("li",[e._v("The simplest standard example is, for instance, when a user receives a comment or is tagged in content, he or she can receive notification through email/web-notification of that event. Some possible extensions of this include receiving notification of events that happen to objects connected to a user (such as comments on content, actions on a comment group, etc.).")])])]),e._v(" "),i("li",[e._v("Subscription service: This service provides the subscription capabilities for the adapter site. For example, when a user wants to subscribe to a blog, he/she can request for a subscription from the adopter page. Then notification system facilitates the process of subscription and then uniquely identifies and maintains user and page/blog relationship. Establishing this relationship helps Notification system background processes to identify qualified users and dispatch Notifications to users.")])]),e._v(" "),i("h2",{attrs:{id:"background-processes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#background-processes","aria-hidden":"true"}},[e._v("#")]),e._v(" Background processes")]),e._v(" "),i("p",[e._v("Now we have the details of user subscriptions (from Subscription service) and with some incoming notification request on Queue, published on Kafka queue (by Notification service), background processes will read the published message from queue, validate it, identify the targeted users to be notified, does some preprocessing like creating digest/instant notification message and then dispatches email/web notifications either instant\nor frequency based (daily, weekly).")]),e._v(" "),i("p",[e._v("For dispatching emails, Notification system implements Email dispatcher service which relies on external SMTP email servers. This Email dispatcher service is responsible to send email digest notification on a daily, weekly basis based on user preferences.")]),e._v(" "),i("p",[e._v("To dispatch instant web notifications (bell icon), Notification system implements "),i("strong",[e._v("Web Notification Service (Bell dispatcher)")]),e._v(".")])])}],!1,null,null,null);s.default=a.exports}}]);