(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{168:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"standards-of-our-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standards-of-our-services","aria-hidden":"true"}},[e._v("#")]),e._v(" Standards of Our Services")]),e._v(" "),a("p",[e._v("I'm proud to say that I built services which")]),e._v(" "),a("ul",[a("li",[e._v("gather metrics for our business to make data driven decisions")]),e._v(" "),a("li",[e._v("have sufficient tests to safe guard all major features")]),e._v(" "),a("li",[e._v("deploy smoothly")]),e._v(" "),a("li",[e._v("withstand necessary throughput")]),e._v(" "),a("li",[e._v("alert the right people when unhealthy")]),e._v(" "),a("li",[e._v("alert the right people in advance when approaching capacity")]),e._v(" "),a("li",[e._v("surface errors, latency, throughput, and other relevant metrics at a glance")]),e._v(" "),a("li",[e._v("have sufficient documentation for operation, maintenance, trouble shooting, and future development")])]),e._v(" "),a("p",[e._v("When we finish the MVP phase of the Notifications System, we will all be proud of ourselves for building services with high standards.")]),e._v(" "),a("h2",{attrs:{id:"metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" Metrics")]),e._v(" "),a("h3",{attrs:{id:"performance-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance-metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" Performance metrics")]),e._v(" "),a("ol",[a("li",[e._v("Latency")]),e._v(" "),a("li",[e._v("Throughput")])]),e._v(" "),a("h3",{attrs:{id:"client-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" Client metrics")]),e._v(" "),a("ol",[a("li",[e._v("click through rate")])]),e._v(" "),a("h2",{attrs:{id:"development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development","aria-hidden":"true"}},[e._v("#")]),e._v(" Development")]),e._v(" "),a("p",[e._v("Feature branches VS feature flags\nCathy has strong opinions but restrains herself from influencing a healthy group debate.")]),e._v(" "),a("h3",{attrs:{id:"peer-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-review","aria-hidden":"true"}},[e._v("#")]),e._v(" Peer Review")]),e._v(" "),a("h3",{attrs:{id:"branch-protection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch-protection","aria-hidden":"true"}},[e._v("#")]),e._v(" Branch Protection")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("master")]),e._v(" branch protection (RRE will help with some, but not all)")]),e._v(" "),a("li",[e._v("All checks have passed")]),e._v(" "),a("li",[e._v("PR approved by at least one additional dev")]),e._v(" "),a("li",[e._v("No merge conflicts")]),e._v(" "),a("li",[e._v("Static code analysis")])]),e._v(" "),a("h2",{attrs:{id:"testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testing","aria-hidden":"true"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),a("h3",{attrs:{id:"unit-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests","aria-hidden":"true"}},[e._v("#")]),e._v(" Unit Tests")]),e._v(" "),a("p",[e._v("Unit Tests - What constitutes the need of an unit test? How granular should unit test cover?\nCathy once proposed to have unit tests on all external APIs and APIs dealing with external systems but was deemed as far from sufficient. Cathy once again restrains herself from influencing a healthy group debate.")]),e._v(" "),a("p",[e._v("What testing framework should each service use?")]),e._v(" "),a("h3",{attrs:{id:"integration-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#integration-tests","aria-hidden":"true"}},[e._v("#")]),e._v(" Integration Tests")]),e._v(" "),a("p",[e._v("Integration Tests - what should they be and where should they live?")]),e._v(" "),a("h3",{attrs:{id:"smoke-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smoke-tests","aria-hidden":"true"}},[e._v("#")]),e._v(" Smoke Tests")]),e._v(" "),a("p",[e._v("Smoke tests or sanity tests consist of a non-exhaustive set of tests that aim at ensuring that the most important functions work.  These tests are usually performed on the testing or stage environment.")]),e._v(" "),a("h3",{attrs:{id:"performance-load-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance-load-testing","aria-hidden":"true"}},[e._v("#")]),e._v(" Performance(Load) Testing")]),e._v(" "),a("p",[e._v("Performed before the system goes live.  Which services need to conduct load testing?")]),e._v(" "),a("h2",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build","aria-hidden":"true"}},[e._v("#")]),e._v(" Build")]),e._v(" "),a("p",[e._v("What should be included in the build process other than compile and package?")]),e._v(" "),a("ul",[a("li",[e._v("[RRE has guidelines: linting, testing, code analysis, etc.]")]),e._v(" "),a("li",[e._v("Code Style")]),e._v(" "),a("li",[e._v("Test")])]),e._v(" "),a("h2",{attrs:{id:"deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deployment","aria-hidden":"true"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),a("ul",[a("li",[e._v("How many environment stages should we have? What happens on each environment stage? Who is consuming each environment stage?\n"),a("ul",[a("li",[e._v("Maybe we don't need a testing environment AND a stage environment for every service?")]),e._v(" "),a("li",[e._v("If the service is an RRE artifact, it will get "),a("code",[e._v("test")]),e._v(", "),a("code",[e._v("stage")]),e._v(", "),a("code",[e._v("production")]),e._v(", and "),a("code",[e._v("branch")]),e._v(" deployments, automatically.")])])]),e._v(" "),a("li",[e._v("What is the base number of instances we want in each availability zone?")])]),e._v(" "),a("h2",{attrs:{id:"monitoring-and-alerting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitoring-and-alerting","aria-hidden":"true"}},[e._v("#")]),e._v(" Monitoring and Alerting")]),e._v(" "),a("ul",[a("li",[e._v("Every request from an adapter site need to logged and monitored")]),e._v(" "),a("li",[e._v("Monitoring dashboard for every service we build.  What should the monitoring dashboard contain?\n"),a("ul",[a("li",[e._v("must easily correlate latency/error rate and throughput")])])]),e._v(" "),a("li",[e._v("What alerts do we need?\n"),a("ul",[a("li",[e._v("System down")]),e._v(" "),a("li",[e._v("Error - what types of errors should alert us?")]),e._v(" "),a("li",[e._v("Low throughput (?)")]),e._v(" "),a("li",[e._v("High throughput - (possible attack)")])])])]),e._v(" "),a("h2",{attrs:{id:"hosting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hosting","aria-hidden":"true"}},[e._v("#")]),e._v(" Hosting")]),e._v(" "),a("p",[e._v("Hosting - we will discuss our scaling plan after MVP")]),e._v(" "),a("ul",[a("li",[e._v("CPU threshold - RRE does not auto scale")]),e._v(" "),a("li",[e._v("Memory threshold - RRE does not auto scale")]),e._v(" "),a("li",[e._v("Cassandra threshold - does RRE auto scale??")])])])}],!1,null,null,null);t.default=r.exports}}]);